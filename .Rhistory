v_zeta = rep(1, n_cat)
v_delta = c(2, 2, 2, 2)#rep(,n_cat)#seq_len(n_cat)
sigma2_u = 4
sigma2_e = 1
dat_sim <- gen_data(n_net, n_memb, n_cat, g_cat, p, v_zeta, v_delta, sigma2_u, sigma2_e)
head(dat_sim)
rep <- 500
model_rep <- list()
true_para <- c(gamma, tau, v_delta)
bias_est <- sd_para<- matrix(NA, nrow=rep, ncol=length(true_para))
pval_test <- c()
for (i in 1:rep) {
dat <- gen_data()
model <- lmerTest::lmer(y ~ 1 + treat  + net_cat:n_neighb + (1|net_cat), data = dat)
est_para <- as.numeric(summary(model)$coef[,"Estimate"])
sd_para[i, ] <- as.numeric(summary(model)$coef[,"Std. Error"])
bias_est[i, ] <- est_para - true_para
pval_test[i] <- anova(model)["net_cat:n_neighb", "Pr(>F)"]
}
n_net = 5000
n_memb = 5
n_cat = 4
g_cat = rep(1/4, 4)
p = 0.5
tau = 2
deltabar = 2
v_zeta = rep(1, n_cat)
v_delta = c(2, 2, 2, 2)#rep(,n_cat)#seq_len(n_cat)
sigma2_u = 4
sigma2_e = 1
dat_sim <- gen_data(n_net, n_memb, n_cat, g_cat, p, v_zeta, v_delta, sigma2_u, sigma2_e)
head(dat_sim)
rep <- 5
model_rep <- list()
true_para <- c(gamma, tau, v_delta)
bias_est <- sd_para<- matrix(NA, nrow=rep, ncol=length(true_para))
pval_test <- c()
for (i in 1:rep) {
dat <- gen_data()
model <- lmerTest::lmer(y ~ 1 + treat  + net_cat:n_neighb + (1|net_cat), data = dat)
est_para <- as.numeric(summary(model)$coef[,"Estimate"])
sd_para[i, ] <- as.numeric(summary(model)$coef[,"Std. Error"])
bias_est[i, ] <- est_para - true_para
pval_test[i] <- anova(model)["net_cat:n_neighb", "Pr(>F)"]
}
rep <- 5
model_rep <- list()
true_para <- c(gamma, tau, v_delta)
bias_est <- sd_para<- matrix(NA, nrow=rep, ncol=length(true_para))
pval_test <- c()
for (i in 1:rep) {
dat <- gen_data(n_net, n_memb, n_cat, g_cat, p, v_zeta, v_delta, sigma2_u, sigma2_e)
model <- lmerTest::lmer(y ~ 1 + treat  + net_cat:n_neighb + (1|net_cat), data = dat)
est_para <- as.numeric(summary(model)$coef[,"Estimate"])
sd_para[i, ] <- as.numeric(summary(model)$coef[,"Std. Error"])
bias_est[i, ] <- est_para - true_para
pval_test[i] <- anova(model)["net_cat:n_neighb", "Pr(>F)"]
}
mod_sim_aov <- aov(y ~ 0 + treat  + net_cat:n_neighb + Error(1/net_cat), data = dat_sim)
mod_sim_aov <- aov(y ~ 0 + treat  + net_cat:n_neighb + Error(1/net_cat), data = dat_sim)
mod_sim_mixed <- lmerTest::lmer(y ~ 0 + Skh + inter_cat_neighb + (1|net_cat), data = dat_sim)
summary(mod_sim_mixed)
sqrt(diag(vcov(mod_sim_mixed)[5:8,5:8]))
tukhsd2mcb <- function(aov_obj, conf.level = 0.95, two.sided = FALSE, control.group=NULL, method = c("MCA","MCC","MCB-all","MCB-others"), ...){
# aov_obj: a anova object
# "MCA": All pairwise multiple comparisons
# "MCC": multiple comparisons with control
# "MCB": multiple comparisons with the best of others: mu_i - max_{j\neq i} mu_j
# control.group: a string, name of the control group
# ... parameters from TukeyHSD function
x = TukeyHSD(aov_obj, conf.level = conf.level, ...)
std_err <- sqrt(sum(aov_obj$residuals^2)/aov_obj$df.residual)
factors <- unique(unlist(sapply(rownames(x[[1]]), strsplit, split = "-")))
k <- length(factors) # number of groups
n <- aov_obj$df.residual/k + 1  # size of each group-- balanced case
out.mca <- x[[1]][,-4] ## remove the column 'p_adj'
critical.mca <- (out.mca[1,"upr"] - out.mca[1,"lwr"])/(2*std_err*sqrt(2/n))
critical.mcc <- nCDunnett::qNCDun(p = conf.level, nu = k*(n-1), rho = rep(0.5, k - 1), delta = 0, two.sided = two.sided)
d <- rownames(out.mca)
## MCA
if (method == "MCA") {
out <- out.mca
critical <- critical.mca
}
## MCC
out.update <- out.mca
out.update[,'lwr'] <- out.mca[,1] - (out.mca[1,"upr"] - out.mca[1,"lwr"])/2 * critical.mcc/critical.mca
out.update[,'upr'] <- out.mca[,1] + (out.mca[1,"upr"] - out.mca[1,"lwr"])/2 * critical.mcc/critical.mca
if (method == "MCC") {
critical <- critical.mcc
index.right <- grep(paste("-", control.group, "$", sep = ""), d) # "- control.group"
index.left <- grep(paste("^", control.group, "-", sep = ""), d) # "control.group -"
out <- out.update[c(index.right,index.left),]
out[(length(index.right)+1):nrow(out),] <- -out.update[index.left,]
}
## MCB
if (method == "MCB") {
critical <- critical.mcc
out <- out.mca[1:length(factors), c('lwr','upr')]
rownames(out) <- paste(factors, "-max(other)", sep = "")
for(i in seq_along(factors)){
left  <- grep(paste("^", factors[i], "-", sep = ""), d)
right <- grep(paste("-", factors[i], "$", sep = ""), d)
out[i,] <- c(min(out.update[left ,"lwr"], -out.update[right, "upr"]),
min(out.update[left ,"upr"], -out.update[right, "lwr"]))
}
out[out[,'lwr'] > 0, 'lwr'] <- 0
out[out[,'upr'] < 0, 'upr'] <- 0
}
return(list(ci = out, critical.value = critical))
}
#######
summary(mod_sim_aov)
mod_sim_aov <- aov(y ~ 0 + treat  + net_cat:n_neighb + Error(1/net_cat), data = dat_sim)
mod_sim_aov <- aov(y ~ 0 + treat  + net_cat:n_neighb + Error(1/net_cat), data = dat_sim)
mod_sim_aov <- aov(y ~ 0 + treat  + net_cat:n_neighb + Error(1/net_cat), data = dat_sim)
summary(mod_sim_mixed)$coef
tukhsd2mcb(mod_sim_mixed,conf.level = 0.95, two.sided = FALSE, method = "MCB")
mod_sim_aov <- aov(y ~ 0 + treat  + net_cat:n_neighb + Error(1/net_cat), data = dat_sim)
summary(glht(mod_sim_mixed, mcp(inter_cat_neighb="Dunnet")))
### variance too small
## how to set the parameters ....
## Tukey test
summary(glht(mod_sim_mixed, mcp(inter_cat_neighb="Tukey")))
mod_sim_mixed <- lmerTest::lmer(y ~ 0 + Skh + inter_cat_neighb + (1|net_cat), data = dat_sim)
summary(mod_sim_mixed)
sqrt(diag(vcov(mod_sim_mixed)[5:8,5:8]))
### variance too small
## how to set the parameters ....
## Tukey test
summary(glht(mod_sim_mixed, mcp(inter_cat_neighb="Tukey")))
ghht2mcb(mod_sim_mixed, direction="max")
glht2mcb(mod_sim_mixed, direction="max")
devtools::document()
devtools::document()
devtools::document()
library(EgonetSpillover)
n_net = 5000
n_memb = 5
n_cat = 4
g_cat = rep(1/4, 4)
p = 0.5
tau = 2
deltabar = 2
v_zeta = rep(1, n_cat)
v_delta = c(2, 2, 2, 2)#rep(,n_cat)#seq_len(n_cat)
sigma2_u = 4
sigma2_e = 1
dat_sim <- gen_data(n_net, n_memb, n_cat, g_cat, p, v_zeta, v_delta, sigma2_u, sigma2_e)
head(dat_sim)
mod_sim_mixed <- lmerTest::lmer(y ~ 0 + Skh + inter_cat_neighb + (1|net_cat), data = dat_sim)
summary(mod_sim_mixed)
sqrt(diag(vcov(mod_sim_mixed)[5:8,5:8]))
n_net = 5000
n_memb = 5
n_cat = 4
g_cat = rep(1/4, 4)
p = 0.5
tau = 2
deltabar = 2
v_zeta = rep(1, n_cat)
v_delta = c(2, 2, 2, 2)#rep(,n_cat)#seq_len(n_cat)
sigma2_u = 4
sigma2_e = 1
dat_sim <- gen_data(n_net, n_memb, n_cat, g_cat, p, v_zeta, v_delta, sigma2_u, sigma2_e)
head(dat_sim)
mod_sim_mixed <- lmerTest::lmer(y ~ 0 + Skh + inter_cat_neighb + (1|net_cat), data = dat_sim)
summary(mod_sim_mixed)
sqrt(diag(vcov(mod_sim_mixed)[5:8,5:8]))
vcov(mod_sim_mixed)
vcov(mod_sim_mixed)[5:8,5:8]
diag(vcov(mod_sim_mixed)[5:8,5:8])
vcov(mod_sim_mixed)[5:8,5:8])
vcov(mod_sim_mixed)[5:8,5:8]
devtools::document()
library(EgonetSpillover)
rm(list=ls())
library(tidyr)
library(dplyr)
n_net = 5000
n_memb = 5
n_cat = 4
g_cat = rep(1/4, 4)
p = 0.5
tau = 2
deltabar = 2
v_zeta = rep(1, n_cat)
v_delta = c(2, 2, 2, 2)#rep(,n_cat)#seq_len(n_cat)
sigma2_u = 4
sigma2_e = 1
dat_sim <- gen_data(n_net, n_memb, n_cat, g_cat, p, v_zeta, v_delta, sigma2_u, sigma2_e)
head(dat_sim
)
dat_sim[1:3,]
View(dat_sim)
devtools::document()
devtools::document()
library(EgonetSpillover)
devtools::document()
library(EgonetSpillover)
remove.packages("EgonetSpillover")
library(EgonetSpillover)
detach("package:forcats", unload = TRUE)
detach("package:EgonetSpillover", unload = TRUE)
library(EgonetSpillover)
help(package="EgonetSpillover")
devtools::document()
library(EgonetSpillover)
devtools::document()
pkgload::dev_help('cor2cov')
devtools::document()
library(EgonetSpillover)
devtools::document()
library(EgonetSpillover)
devtools::document()
devtools::document()
library(EgonetSpillover)
devtools::document()
library(EgonetSpillover)
devtools::document()
library(EgonetSpillover)
devtools::document()
library(EgonetSpillover)
devtools::document()
library(EgonetSpillover)
devtools::document()
library(EgonetSpillover)
devtools::document()
library(EgonetSpillover)
mcbTest <- function(aov_obj, conf.level=.95, two.sided=FALSE, direction='max', control.group=NULL, method = c("MCA","MCC","MCB"), ...){
# model_obj: model from anova or lme4
# "MCA": All pairwise multiple comparisons
# "MCC": multiple comparisons with control
# "MCB": multiple comparisons with the best of others: mu_i - max_{j\neq i} mu_j
x = TukeyHSD(aov_obj, conf.level = conf.level)
std_err <- sqrt(sum(aov_obj$residuals^2)/aov_obj$df.residual)
factors <- unique(unlist(sapply(rownames(x[[1]]), strsplit, split = "-")))
k <- length(factors) # number of groups
n <- aov_obj$df.residual/k + 1  # size of each group-- balanced case
out.mca <- x[[1]][,-4] ## remove the column 'p_adj'
critical.mca <- (out.mca[1,"upr"] - out.mca[1,"lwr"])/(2*std_err*sqrt(2/n))
critical.mcc <- nCDunnett::qNCDun(p = conf.level, nu = k*(n-1), rho = rep(0.5, k - 1), delta = 0, two.sided = two.sided)
d <- rownames(out.mca)
## MCA
if (method == "MCA") {
out <- out.mca
critical <- critical.mca
}
## MCC
out.update <- out.mca
out.update[,'lwr'] <- out.mca[,1] - (out.mca[1,"upr"] - out.mca[1,"lwr"])/2 * critical.mcc/critical.mca
out.update[,'upr'] <- out.mca[,1] + (out.mca[1,"upr"] - out.mca[1,"lwr"])/2 * critical.mcc/critical.mca
if (method == "MCC") {
critical <- critical.mcc
index.right <- grep(paste("-", control.group, "$", sep = ""), d) # "- control.group"
index.left <- grep(paste("^", control.group, "-", sep = ""), d) # "control.group -"
out <- out.update[c(index.right,index.left),]
# -- index.left -- zero length
out[(length(index.right)+1):nrow(out),] <- -out.update[index.left,]
}
## MCB
if (method == "MCB") {
critical <- critical.mcc
out <- out.mca[1:length(factors), c('lwr','upr')]
rownames(out) <- paste(factors, "-max(other)", sep = "")
for(i in seq_along(factors)){
left  <- grep(paste("^", factors[i], "-", sep = ""), d)
right <- grep(paste("-", factors[i], "$", sep = ""), d)
out[i,] <- c(min(out.update[left ,"lwr"], -out.update[right, "upr"]),
min(out.update[left ,"upr"], -out.update[right, "lwr"]))
}
out[out[,'lwr'] > 0, 'lwr'] <- 0
out[out[,'upr'] < 0, 'upr'] <- 0
}
return(list(ci = out, critical.value = critical))
}
conf.level=.95
two.sided=FALSE
direction='max'
control.group=NULL
data <- data.frame(y = c(45, 59, 48, 46, 38, 47,
21, 12, 14, 17, 13, 17,
37, 32, 15, 25, 39, 41,
16, 11, 20, 21, 14, 7),
color = rep(c("yellow", "white", "red", "blue"), each = 6),
stringsAsFactors = TRUE)
data
fit <- aov(y ~ color, data = data)
x = TukeyHSD(aov_obj, conf.level = conf.level)
aov_obj=fit
x = TukeyHSD(aov_obj, conf.level = conf.level)
std_err <- sqrt(sum(aov_obj$residuals^2)/aov_obj$df.residual)
factors <- unique(unlist(sapply(rownames(x[[1]]), strsplit, split = "-")))
k <- length(factors) # number of groups
n <- aov_obj$df.residual/k + 1  # size of each group-- balanced case
out.mca <- x[[1]][,-4] ## remove the column 'p_adj'
critical.mca <- (out.mca[1,"upr"] - out.mca[1,"lwr"])/(2*std_err*sqrt(2/n))
critical.mcc <- nCDunnett::qNCDun(p = conf.level, nu = k*(n-1), rho = rep(0.5, k - 1), delta = 0, two.sided = two.sided)
d <- rownames(out.mca)
x
summary(x)
names(summary(x))
names(x)
fit
names(fit)
summary(fit)
out.update <- out.mca
out.update[,'lwr'] <- out.mca[,1] - (out.mca[1,"upr"] - out.mca[1,"lwr"])/2 * critical.mcc/critical.mca
out.update[,'upr'] <- out.mca[,1] + (out.mca[1,"upr"] - out.mca[1,"lwr"])/2 * critical.mcc/critical.mca
out.update
x = TukeyHSD(aov_obj, conf.level = conf.level)
std_err <- sqrt(sum(aov_obj$residuals^2)/aov_obj$df.residual)
factors <- unique(unlist(sapply(rownames(x[[1]]), strsplit, split = "-")))
k <- length(factors) # number of groups
n <- aov_obj$df.residual/k + 1  # size of each group-- balanced case
out.mca <- x[[1]] ## remove the column 'p_adj'
critical.mca <- (out.mca[1,"upr"] - out.mca[1,"lwr"])/(2*std_err*sqrt(2/n))
critical.mcc <- nCDunnett::qNCDun(p = conf.level, nu = k*(n-1), rho = rep(0.5, k - 1), delta = 0, two.sided = two.sided)
d <- rownames(out.mca)
out.update <- out.mca
out.update[,'lwr'] <- out.mca[,1] - (out.mca[1,"upr"] - out.mca[1,"lwr"])/2 * critical.mcc/critical.mca
out.update[,'upr'] <- out.mca[,1] + (out.mca[1,"upr"] - out.mca[1,"lwr"])/2 * critical.mcc/critical.mca
out.update
critical <- critical.mcc
out <- out.mca[1:length(factors), c('lwr','upr')]
rownames(out) <- paste(factors, "-max(other)", sep = "")
for(i in seq_along(factors)){
left  <- grep(paste("^", factors[i], "-", sep = ""), d)
right <- grep(paste("-", factors[i], "$", sep = ""), d)
out[i,] <- c(min(out.update[left ,"lwr"], -out.update[right, "upr"]),
min(out.update[left ,"upr"], -out.update[right, "lwr"]))
}
out[out[,'lwr'] > 0, 'lwr'] <- 0
out[out[,'upr'] < 0, 'upr'] <- 0
out
critical <- critical.mcc
out <- out.mca[1:length(factors), ]
rownames(out) <- paste(factors, "-max(other)", sep = "")
for(i in seq_along(factors)){
left  <- grep(paste("^", factors[i], "-", sep = ""), d)
right <- grep(paste("-", factors[i], "$", sep = ""), d)
out[i,] <- c(min(out.update[left ,"lwr"], -out.update[right, "upr"]),
min(out.update[left ,"upr"], -out.update[right, "lwr"]))
}
out[out[,'lwr'] > 0, 'lwr'] <- 0
out[out[,'upr'] < 0, 'upr'] <- 0
out
ind <- which(out[,'upr'] >0)
ind
strsplit(rownames(out)[ind])
strsplit(rownames(out)[ind]."-")
strsplit(rownames(out)[ind],"-")
strsplit(rownames(out)[ind],"-")[[1]]
strsplit(rownames(out)[ind],"-")[[1]][1]
factors
cat("The best group(s) are ", factors[i] ,"\n")
cat("The best group(s) are: ", factors[i] ,"\n")
mcbTest <- function(aov_obj, conf.level=.95, two.sided=FALSE, direction='max', control.group=NULL, method = c("MCA","MCC","MCB"), ...){
# model_obj: model from anova or lme4
# "MCA": All pairwise multiple comparisons
# "MCC": multiple comparisons with control
# "MCB": multiple comparisons with the best of others: mu_i - max_{j\neq i} mu_j
x = TukeyHSD(aov_obj, conf.level = conf.level)
std_err <- sqrt(sum(aov_obj$residuals^2)/aov_obj$df.residual)
factors <- unique(unlist(sapply(rownames(x[[1]]), strsplit, split = "-")))
k <- length(factors) # number of groups
n <- aov_obj$df.residual/k + 1  # size of each group-- balanced case
out.mca <- x[[1]] ## remove the column 'p_adj'
critical.mca <- (out.mca[1,"upr"] - out.mca[1,"lwr"])/(2*std_err*sqrt(2/n))
critical.mcc <- nCDunnett::qNCDun(p = conf.level, nu = k*(n-1), rho = rep(0.5, k - 1), delta = 0, two.sided = two.sided)
d <- rownames(out.mca)
bestgroup <- NULL
## MCA
if (method == "MCA") {
out <- out.mca
critical <- critical.mca
}
## MCC
out.update <- out.mca
out.update[,'lwr'] <- out.mca[,1] - (out.mca[1,"upr"] - out.mca[1,"lwr"])/2 * critical.mcc/critical.mca
out.update[,'upr'] <- out.mca[,1] + (out.mca[1,"upr"] - out.mca[1,"lwr"])/2 * critical.mcc/critical.mca
if (method == "MCC") {
critical <- critical.mcc
index.right <- grep(paste("-", control.group, "$", sep = ""), d) # "- control.group"
index.left <- grep(paste("^", control.group, "-", sep = ""), d) # "control.group -"
out <- out.update[c(index.right,index.left),]
# -- index.left -- zero length
out[(length(index.right)+1):nrow(out),] <- -out.update[index.left,]
}
## MCB
if (method == "MCB") {
critical <- critical.mcc
out <- out.mca[1:length(factors), ]
rownames(out) <- paste(factors, "-max(other)", sep = "")
for(i in seq_along(factors)){
left  <- grep(paste("^", factors[i], "-", sep = ""), d)
right <- grep(paste("-", factors[i], "$", sep = ""), d)
out[i,] <- c(min(out.update[left ,"lwr"], -out.update[right, "upr"]),
min(out.update[left ,"upr"], -out.update[right, "lwr"]))
}
out[out[,'lwr'] > 0, 'lwr'] <- 0
out[out[,'upr'] < 0, 'upr'] <- 0
ind <- which(out[,'upr'] >0)
cat("The best group(s) are: ", factors[i] ,"\n")
bestgroup <- factors[i]
}
return(list(ci = out, critical.value = critical, bestgroup=bestgroup))
}
data <- data.frame(y = c(45, 59, 48, 46, 38, 47,
21, 12, 14, 17, 13, 17,
37, 32, 15, 25, 39, 41,
16, 11, 20, 21, 14, 7),
color = rep(c("yellow", "white", "red", "blue"), each = 6),
stringsAsFactors = TRUE)
fit <- aov(y ~ color, data = data)
mcbTest(fit,conf.level = 0.99, two.sided = FALSE, method = "MCB")
devtools::document()
rm(list = c("mcbTest"))
devtools::document()
devtools::document()
devtools::document()
devtools::document()
library(EgonetSpillover)
devtools::document()
library(EgonetSpillover)
out
devtools::document()
library(EgonetSpillover)
gen_egonet <- function(
n_net, # number of subjects n_ingroup = 25, # number of ingroup stimuli n_outgroup = 25, # number of outgroup stimuli
n_memb, # number of social members in each network
n_cat, # number of categories
g_cat, # proportion of each category
p, # Bernoulli trial probability
#tau, # coefficient of treatment effect
#deltabar, # coefficient of treated neighbors
v_zeta, # vector of coefficients of categorical variable, length is n_cat -1
v_delta, # vector of coefficients for interaction of categorical variable and treated neighbors
sigma2_u, # variance of random intercept at level network
sigma2_e, # variance of residual
cat_refid=4) { # reference category, has the largest effect by default
network <- data.frame(
net_id = seq_len(n_net),
net_cat = factor(rep(1:n_cat, g_cat*n_net)),
net_mu = rnorm(n_net, mean=0, sd=sqrt(sigma2_u)))
mem_id = seq_len(1+n_memb)
temp <- crossing(network, mem_id)
# add treatment
temp$treat <- 0
net_treat <- sample(c(1,0), size=n_net, prob=c(p,1-p), replace=TRUE)
temp[temp$mem_id==1,"treat"] <- net_treat
# add number of treated neighbors
temp$n_neighb <- 0
treat_netid <- unlist(temp[temp$treat==1, "net_id"])
temp[temp$net_id %in% treat_netid, "n_neighb"] <- rep(c(0,rep(1,n_memb)), sum(temp$treat==1))
# add response
Skh <- as.matrix(fastDummies::dummy_cols(temp$net_cat, remove_selected_columns=TRUE))
colnames(Skh) <- paste0("c",1:ncol(Skh))
# term_cat <- as.vector(Skh[,-1] %*% v_zeta)
inter_cat_neighb <- temp$n_neighb*Skh
term_intact <- as.vector(inter_cat_neighb %*% v_delta)
temp %>% mutate(net_cat=relevel(net_cat,ref="1")) %>% mutate(Skh = Skh) %>%
mutate(y = as.vector(Skh %*% v_zeta) + term_intact + net_mu +
rnorm(n_net*(1+n_memb), mean=0, sd=sqrt(sigma2_e)),
inter_cat_neighb=inter_cat_neighb)
# tau*temp$treat + deltabar*temp$n_neighb
}
library(tidyr)
library(dplyr)
n_net = 5000
n_memb = 5
n_cat = 4
g_cat = rep(1/4, 4)
p = 0.5
tau = 2
deltabar = 2
v_zeta = rep(1, n_cat)
v_delta = c(2, 2, 2, 2)#rep(,n_cat)#seq_len(n_cat)
sigma2_u = 4
sigma2_e = 1
dat_sim <- gen_egonet(n_net, n_memb, n_cat, g_cat, p, v_zeta, v_delta, sigma2_u, sigma2_e)
head(dat_sim)
mod_sim_mixed <- lmerTest::lmer(y ~ 0 + Skh + inter_cat_neighb + (1|net_cat), data = dat_sim)
summary(mod_sim_mixed)
vcov(mod_sim_mixed)[5:8,5:8]
colnames(data_sim)
colnames(dat_sim)
mod_sim_mixed <- lmerTest::lmer(y ~ 0 + Skh + inter_cat_neighb + (1|net_id), data = dat_sim)
summary(mod_sim_mixed)
vcov(mod_sim_mixed)[5:8,5:8]
colnames(dat_sim)
devtools::document()
rm(list = c("gen_egonet"))
devtools::document()
library(EgonetSpillover)
rm(list=ls())
library(tidyr)
library(dplyr)
n_net = 5000
n_memb = 5
n_cat = 4
g_cat = rep(1/4, 4)
p = 0.5
tau = 2
deltabar = 2
v_zeta = rep(1, n_cat)
v_delta = c(2, 2, 2, 2)#rep(,n_cat)#seq_len(n_cat)
sigma2_u = 4
sigma2_e = 1
dat_sim <- gen_egonet(n_net, n_memb, n_cat, g_cat, p, v_zeta, v_delta, sigma2_u, sigma2_e)
head(dat_sim); colnames(dat_sim)
View(dat_sim)
